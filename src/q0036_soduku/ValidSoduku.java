package q0036_soduku;

public class ValidSoduku {
	/**
	 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

		数字 1-9 在每一行只能出现一次。
		数字 1-9 在每一列只能出现一次。
		数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
		
		输入:
		[
		  ["5","3",".",".","7",".",".",".","."],
		  ["6",".",".","1","9","5",".",".","."],
		  [".","9","8",".",".",".",".","6","."],
		  ["8",".",".",".","6",".",".",".","3"],
		  ["4",".",".","8",".","3",".",".","1"],
		  ["7",".",".",".","2",".",".",".","6"],
		  [".","6",".",".",".",".","2","8","."],
		  [".",".",".","4","1","9",".",".","5"],
		  [".",".",".",".","8",".",".","7","9"]
		]
		输出: true
		
		输入:
		[
		  ["8","3",".",".","7",".",".",".","."],
		  ["6",".",".","1","9","5",".",".","."],
		  [".","9","8",".",".",".",".","6","."],
		  ["8",".",".",".","6",".",".",".","3"],
		  ["4",".",".","8",".","3",".",".","1"],
		  ["7",".",".",".","2",".",".",".","6"],
		  [".","6",".",".",".",".","2","8","."],
		  [".",".",".","4","1","9",".",".","5"],
		  [".",".",".",".","8",".",".","7","9"]
		]
		输出: false

	 */
	public static boolean isValidSudoku(char[][] board) {
        if(board == null || board.length != 9 || board[0].length!=9){
        	return false;
        }
        
        //验证每一行 row
        for(int row = 0; row < 9; row++){
        	boolean[] taken = new boolean[9];
        	for(int idx=0; idx<9 ; idx++){
        		char c = board[row][idx];
        		if(c != '.'){
        			int num = c - '1';
        			if(taken[num]==true) return false;
        			else taken[num] = true;
        		}
        	}
        }
        //验证每一列 column
        for(int col = 0; col < 9; col++){
        	boolean[] taken = new boolean[9];
        	for(int idx=0; idx<9 ; idx++){
        		char c = board[idx][col];
        		if(c != '.'){
        			int num = c - '1';
        			if(taken[num]==true) return false;
        			else taken[num] = true;
        		}
        	}
        }
        //验证每一个小九宫格 3x3 box
        for(int box = 0;box < 9; box++){
        	boolean[] taken = new boolean[9];
        	for(int row=0;row<3;row++){
        		for(int col=0;col<3;col++){
        			int rowBox = row+3*(box/3);
					int colBox = col+3*(box%3);
					char c = board[rowBox][colBox];
        			if(c != '.'){
        				int num = c - '1';
            			if(taken[num]==true) return false;
            			else taken[num] = true;
        			}
        		}
        	}
        }
        
        return true;
    }
	
	public static void main(String[] args) {
		char[][] board1 = {
		        		  {'5','3','.','.','7','.','.','.','.'},
		        		  {'6','.','.','1','9','5','.','.','.'},
		        		  {'.','9','8','.','.','.','.','6','.'},
		        		  {'8','.','.','.','6','.','.','.','3'},
		        		  {'4','.','.','8','.','3','.','.','1'},
		        		  {'7','.','.','.','2','.','.','.','6'},
		        		  {'.','6','.','.','.','.','2','8','.'},
		        		  {'.','.','.','4','1','9','.','.','5'},
		        		  {'.','.','.','.','8','.','.','7','9'}
		        		};
		
		char[][] board2 = {
			           		{'8','3','.','.','7','.','.','.','.'},
			        		{'6','.','.','1','9','5','.','.','.'},
			        		{'.','9','8','.','.','.','.','6','.'},
			        		{'8','.','.','.','6','.','.','.','3'},
			        		{'4','.','.','8','.','3','.','.','1'},
			        		{'7','.','.','.','2','.','.','.','6'},
			        		{'.','6','.','.','.','.','2','8','.'},
			        		{'.','.','.','4','1','9','.','.','5'},
			        		{'.','.','.','.','8','.','.','7','9'}
		        		};
		boolean result = isValidSudoku(board2);
		System.out.println(result);
	}
	
}
